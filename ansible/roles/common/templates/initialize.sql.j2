-- All indexes on crawled_url, uncrawled_url and out_of_scope_url are created in finalize.sql (for insert speed)
CREATE TABLE crawled_url(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        timestamp DATETIME,
        status_code INTEGER,
        size BIGINT,
        payload_size BIGINT,
        url VARCHAR(4000),
        hop_path VARCHAR(255),
        is_seed_redirect INTEGER(1),
        via VARCHAR(255),
        mimetype VARCHAR(255),
        content_digest VARCHAR(255),
        seed VARCHAR(4000),
        is_duplicate INTEGER(1),
        warc_filename VARCHAR(255),
        warc_offset VARCHAR(255),
        warc_content_bytes BIGINT,
        host VARCHAR(255));


CREATE TABLE uncrawled_url(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        timestamp DATETIME,
        url VARCHAR(4000),
        hop_path VARCHAR(255),
        status_code INTEGER,
        via VARCHAR(255),
        seed VARCHAR(4000),
        host VARCHAR(255));

CREATE TABLE out_of_scope_url (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        url VARCHAR(4000),
        host VARCHAR(4000),
        seed VARCHAR(4000));

CREATE TABLE host_statistics(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        host VARCHAR(4000) UNIQUE,
        all_count BIGINT,
        new_count BIGINT,
        all_size BIGINT,
        new_size BIGINT,
        warc_all_count BIGINT,
        warc_new_count BIGINT,
        warc_all_content_bytes BIGINT,
        warc_new_content_bytes BIGINT,
        blocked INTEGER,
        queued INTEGER,
        out_of_scope INTEGER);

CREATE INDEX host_index ON host_statistics (host);

CREATE TRIGGER collect_host_statistics AFTER INSERT ON crawled_url
        FOR EACH ROW
        BEGIN
            UPDATE host_statistics
                SET
                    all_count = all_count + CASE WHEN new.status_code > 0 THEN 1 ELSE 0 END,
                    all_size = all_size + CASE WHEN new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,
                    new_count = new_count + CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN 1 ELSE 0 END,
                    new_size = new_size + CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,
                    warc_all_count = warc_all_count + CASE WHEN new.warc_filename IS NOT NULL THEN 1 ELSE 0 END,
                    warc_new_count = warc_new_count + CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN 1 ELSE 0 END,
                    warc_all_content_bytes = warc_all_content_bytes + CASE WHEN new.warc_filename IS NOT NULL THEN new.warc_content_bytes ELSE 0 END,
                    warc_new_content_bytes = warc_new_content_bytes + CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN new.warc_content_bytes ELSE 0 END,
                    blocked = blocked + CASE new.status_code WHEN -9998 THEN 1 ELSE 0 END
            WHERE host = new.host;
            -- If no update happened (i.e. the row didn't exist) then insert one
            INSERT INTO host_statistics (host, all_count, all_size, new_count, new_size, warc_all_count, warc_new_count, warc_all_content_bytes, warc_new_content_bytes, blocked, queued, out_of_scope)
                SELECT
                    new.host,                                              -- host
                    CASE WHEN new.status_code > 0 THEN 1 ELSE 0 END,       -- all_count
                    CASE WHEN new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,   -- all_size
                    CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN 1 ELSE 0 END,                   -- new_count
                    CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END, -- new_size
                    CASE WHEN new.warc_filename IS NOT NULL THEN 1 ELSE 0 END,
                    CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN 1 ELSE 0 END,
                    CASE WHEN new.warc_filename IS NOT NULL THEN new.warc_content_bytes ELSE 0 END,
                    CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN new.warc_content_bytes ELSE 0 END,
                    CASE new.status_code WHEN -9998 THEN 1 ELSE 0 END,     -- blocked
                    0,                                                     -- queued (inserts on crawled_url don't include queued)
                    0                                                      -- out_of_scope (inserts on crawled_url don't include OOS)
                WHERE (Select Changes() = 0);
        END;

CREATE TRIGGER collect_host_uncrawled_statistics AFTER INSERT ON uncrawled_url
       FOR EACH ROW
       BEGIN
           UPDATE host_statistics
           SET
               queued = queued + CASE WHEN new.status_code = 0 THEN 1 ELSE 0 END,
               blocked = blocked + CASE WHEN new.status_code = -9998 THEN 1 ELSE 0 END
           WHERE host = new.host;
       INSERT INTO host_statistics (host, all_count, all_size, new_count, new_size, warc_all_count, warc_new_count, warc_all_content_bytes, warc_new_content_bytes, queued, blocked, out_of_scope)
           SELECT
               new.host,
               0, 0, 0, 0, 0, 0, 0, 0,
               CASE WHEN new.status_code = 0 THEN 1 ELSE 0 END, -- queued
               CASE WHEN new.status_code = -9998 THEN 1 ELSE 0 END, -- blocked
               0 -- out of scope
           WHERE (Select Changes() = 0);
       END;

CREATE TRIGGER collect_host_oos_statistics AFTER INSERT ON out_of_scope_url
        FOR EACH ROW
        BEGIN
            UPDATE host_statistics
                SET
                    out_of_scope = out_of_scope + 1
                WHERE host = new.host;
            INSERT INTO host_statistics (host, all_count, all_size, new_count, new_size, warc_all_count, warc_new_count, warc_all_content_bytes, warc_new_content_bytes, blocked, queued, out_of_scope)
            SELECT
            new.host,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    1 -- out_of_scope
                WHERE (Select Changes() = 0);
        END;

CREATE TABLE seed_host_statistics(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        host VARCHAR(4000),
        seed VARCHAR(4000),
        all_count BIGINT,
        new_count BIGINT,
        all_size BIGINT,
        new_size BIGINT,
        warc_all_count BIGINT,
        warc_new_count BIGINT,
        warc_all_content_bytes BIGINT,
        warc_new_content_bytes BIGINT,
        blocked INTEGER,
        queued INTEGER,
        out_of_scope INTEGER);

CREATE INDEX seed_host_index ON seed_host_statistics (seed, host);

CREATE TRIGGER collect_seed_host_statistics AFTER INSERT ON crawled_url
        FOR EACH ROW
        BEGIN
            UPDATE seed_host_statistics
                SET
                    all_count = all_count + CASE WHEN new.status_code > 0 THEN 1 ELSE 0 END,
                    all_size = all_size + CASE WHEN new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,
                    new_count = new_count + CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN 1 ELSE 0 END,
                    new_size = new_size + CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,
                    warc_all_count = warc_all_count + CASE WHEN new.warc_filename IS NOT NULL THEN 1 ELSE 0 END,
                    warc_new_count = warc_new_count + CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN 1 ELSE 0 END,
                    warc_all_content_bytes = warc_all_content_bytes + CASE WHEN new.warc_filename IS NOT NULL THEN new.warc_content_bytes ELSE 0 END,
                    warc_new_content_bytes = warc_new_content_bytes + CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN new.warc_content_bytes ELSE 0 END,
                    blocked = blocked + CASE new.status_code WHEN -9998 THEN 1 ELSE 0 END
            WHERE host = new.host AND seed = new.seed;
            -- If no update happened (i.e. the row didn't exist) then insert one
            INSERT INTO seed_host_statistics (host, seed, all_count, all_size, new_count, new_size, warc_all_count, warc_new_count, warc_all_content_bytes, warc_new_content_bytes, blocked, queued, out_of_scope)
                SELECT
                    new.host,                                              -- host
                    new.seed,                                              -- seed
                    CASE WHEN new.status_code > 0 THEN 1 ELSE 0 END,       -- all_count
                    CASE WHEN new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,   -- all_size
                    CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN 1 ELSE 0 END,                   -- new_count
                    CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END, -- new_size
                    CASE WHEN new.warc_filename IS NOT NULL THEN 1 ELSE 0 END,
                    CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN 1 ELSE 0 END,
                    CASE WHEN new.warc_filename IS NOT NULL THEN new.warc_content_bytes ELSE 0 END,
                    CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN new.warc_content_bytes ELSE 0 END,
                    CASE new.status_code WHEN -9998 THEN 1 ELSE 0 END,     -- blocked
                    0,                                                     -- queued (inserts on crawled_url don't include queued)
                    NULL                                                   -- out_of_scope (inserts on crawled_url don't include OOS)
                WHERE (Select Changes() = 0);
        END;

CREATE TRIGGER collect_seed_host_uncrawled_statistics AFTER INSERT ON uncrawled_url
       FOR EACH ROW
       BEGIN
           UPDATE seed_host_statistics
           SET
               queued = queued + CASE WHEN new.status_code = 0 THEN 1 ELSE 0 END,
               blocked = blocked + CASE WHEN new.status_code = -9998 THEN 1 ELSE 0 END
           WHERE host = new.host AND seed = new.seed;
       INSERT INTO seed_host_statistics (seed, host, all_count, all_size, new_count, new_size, warc_all_count, warc_new_count, warc_all_content_bytes, warc_new_content_bytes, queued, blocked, out_of_scope)
           SELECT
               new.seed,
               new.host,
               0, 0, 0, 0, 0, 0, 0, 0,
               CASE WHEN new.status_code = 0 THEN 1 ELSE 0 END, -- queued
               CASE WHEN new.status_code = -9998 THEN 1 ELSE 0 END, -- blocked
               NULL -- out of scope
           WHERE (Select Changes() = 0);
       END;

CREATE TRIGGER collect_seed_host_oos_statistics AFTER INSERT ON out_of_scope_url
        FOR EACH ROW
    WHEN new.seed IS NOT NULL
        BEGIN
            UPDATE seed_host_statistics
                SET
                    out_of_scope = CASE WHEN out_of_scope IS NULL THEN 1 ELSE out_of_scope + 1 END
                WHERE host = new.host AND seed = new.seed;
            INSERT INTO seed_host_statistics (host, seed, all_count, all_size, new_count, new_size, warc_all_count, warc_new_count, warc_all_content_bytes, warc_new_content_bytes, blocked, queued, out_of_scope)
            SELECT
                    new.host,
                    new.seed,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    1 -- out_of_scope
                WHERE (Select Changes() = 0);
        END;

CREATE TABLE seed_statistics(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        seed VARCHAR(4000) UNIQUE,
        all_count BIGINT,
        new_count BIGINT,
        all_size BIGINT,
        new_size BIGINT,
        warc_all_count BIGINT,
        warc_new_count BIGINT,
        warc_all_content_bytes BIGINT,
        warc_new_content_bytes BIGINT,
        timestamp DATETIME,
        status INTEGER,
        status_code INTEGER,
        redirects VARCHAR(100000));

CREATE INDEX seed_index ON seed_statistics (seed);

CREATE TRIGGER update_seed_counts AFTER INSERT ON crawled_url
    FOR EACH ROW
    BEGIN
        UPDATE seed_statistics SET
            timestamp = CASE WHEN new.hop_path IS NULL OR NOT length(new.hop_path) THEN new.timestamp ELSE timestamp END,   -- timestamp
            status = CASE WHEN new.hop_path IS NULL OR NOT length(new.hop_path) THEN SEEDCRAWLEDSTATUS(new.status_code) ELSE status END,  -- status
            status_code = CASE WHEN new.hop_path IS NULL OR NOT length(new.hop_path) THEN new.status_code ELSE status_code END, -- status_code
            all_count = all_count + CASE WHEN new.status_code > 0 THEN 1 ELSE 0 END,
            all_size = all_size + CASE WHEN new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,
            new_count = new_count + CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN 1 ELSE 0 END,
            new_size = new_size + CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,
            warc_all_count = warc_all_count + CASE WHEN new.warc_filename IS NOT NULL THEN 1 ELSE 0 END,
            warc_new_count = warc_new_count + CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN 1 ELSE 0 END,
            warc_all_content_bytes = warc_all_content_bytes + CASE WHEN new.warc_filename IS NOT NULL THEN new.warc_content_bytes ELSE 0 END,
            warc_new_content_bytes = warc_new_content_bytes + CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN new.warc_content_bytes ELSE 0 END
        WHERE seed = new.seed;
        INSERT INTO seed_statistics (seed, timestamp, status, status_code, all_count, all_size, new_count, new_size, warc_all_count, warc_new_count, warc_all_content_bytes, warc_new_content_bytes)
            SELECT
                new.seed,                                                                            -- seed
                CASE WHEN new.hop_path IS NULL OR NOT length(new.hop_path) THEN new.timestamp END,   -- timestamp
                CASE WHEN new.hop_path IS NULL OR NOT length(new.hop_path) THEN SEEDCRAWLEDSTATUS(new.status_code) END,  -- status
                CASE WHEN new.hop_path IS NULL OR NOT length(new.hop_path) THEN new.status_code END, -- status_code
                CASE WHEN new.status_code > 0 THEN 1 ELSE 0 END,                                     -- all_count
                CASE WHEN new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,                   -- all_size
                CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN 1 ELSE 0 END,
                CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,
                CASE WHEN new.warc_filename IS NOT NULL THEN 1 ELSE 0 END,
                CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN 1 ELSE 0 END,
                CASE WHEN new.warc_filename IS NOT NULL THEN new.warc_content_bytes ELSE 0 END,
                CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN new.warc_content_bytes ELSE 0 END
            WHERE (SELECT Changes() = 0);
    END;

CREATE TRIGGER collect_redirect_seed_statistics AFTER INSERT ON crawled_url
    FOR EACH ROW
    WHEN new.hop_path REGEXP "^R+$"
    BEGIN
        UPDATE seed_statistics
            SET
                redirects = BUILDREDIRECTARRAY(new.url, new.status_code, new.hop_path, redirects)
        WHERE seed = new.seed;
        INSERT INTO seed_statistics (seed, redirects)
            SELECT
                new.seed,                                                             -- seed
                BUILDREDIRECTARRAY(new.url, new.status_code, new.hop_path, NULL)
            WHERE (Select Changes() = 0);
    END;

CREATE TRIGGER collect_seed_uncrawled_statistics AFTER INSERT ON uncrawled_url
       FOR EACH ROW
       WHEN new.hop_path IS NULL OR NOT length(new.hop_path)
       BEGIN
           UPDATE seed_statistics
           SET
               timestamp =   new.timestamp,
               status =      SEEDCRAWLEDSTATUS(new.status_code),
               status_code = new.status_code
           WHERE seed = new.seed;
        INSERT INTO seed_statistics (seed, timestamp, status, status_code, all_count, all_size, new_count, new_size, warc_all_count, warc_new_count, warc_all_content_bytes, warc_new_content_bytes)
           SELECT
                new.seed,                                                             -- seed
                new.timestamp,                                                        -- timestamp
                SEEDCRAWLEDSTATUS(new.status_code),                                   -- status
                new.status_code,                                                      -- status_code
                0,0,0,0,0,0,0,0
           WHERE (Select Changes() = 0);
       END;

CREATE TABLE mimetype_statistics(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        mimetype VARCHAR(4000) UNIQUE,
        all_count BIGINT,
        new_count BIGINT,
        all_size BIGINT,
        new_size BIGINT,
        warc_all_count BIGINT,
        warc_new_count BIGINT,
        warc_all_content_bytes BIGINT,
        warc_new_content_bytes BIGINT);

CREATE INDEX mimetype_index ON mimetype_statistics (mimetype);

CREATE TRIGGER collect_mimetype_statistics AFTER INSERT ON crawled_url
        FOR EACH ROW
        BEGIN
            UPDATE mimetype_statistics
                SET
                    all_count = all_count + CASE WHEN new.status_code > 0 THEN 1 ELSE 0 END,
                    all_size = all_size + CASE WHEN new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,
                    new_count = new_count + CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN 1 ELSE 0 END,
                    new_size = new_size + CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,
                    warc_all_count = warc_all_count + CASE WHEN new.warc_filename IS NOT NULL THEN 1 ELSE 0 END,
                    warc_new_count = warc_new_count + CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN 1 ELSE 0 END,
                    warc_all_content_bytes = warc_all_content_bytes + CASE WHEN new.warc_filename IS NOT NULL THEN new.warc_content_bytes ELSE 0 END,
                    warc_new_content_bytes = warc_new_content_bytes + CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN new.warc_content_bytes ELSE 0 END
            WHERE mimetype = new.mimetype;
            -- If no update happened (i.e. the row didn't exist) then insert one
            INSERT INTO mimetype_statistics (mimetype, all_count, all_size, new_count, new_size, warc_all_count, warc_new_count, warc_all_content_bytes, warc_new_content_bytes)
                SELECT
                    new.mimetype,                                          -- mimetype
                    CASE WHEN new.status_code > 0 THEN 1 ELSE 0 END,       -- all_count
                    CASE WHEN new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,   -- all_size
                    CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN 1 ELSE 0 END,                    -- new_count
                    CASE WHEN NOT new.is_duplicate AND new.status_code > 0 THEN ifnull(new.size, 0) ELSE 0 END,  -- new_size
                    CASE WHEN new.warc_filename IS NOT NULL THEN 1 ELSE 0 END,
                    CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN 1 ELSE 0 END,
                    CASE WHEN new.warc_filename IS NOT NULL THEN new.warc_content_bytes ELSE 0 END,
                    CASE WHEN new.warc_filename IS NOT NULL AND NOT new.is_duplicate THEN new.warc_content_bytes ELSE 0 END
                WHERE (Select Changes() = 0);
        END;

